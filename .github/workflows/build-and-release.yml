name: Build and Release Libraries

on:
  workflow_dispatch:
  release:
    types: [created]


jobs:
  build:
    name: Build for ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.os }}
    container: ${{ matrix.target.container }}
    env:
      TARGET: ${{ matrix.target.triple }}
    
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: Windows
            os: windows-latest
            arch: x86_64
            triple: x86_64-pc-windows-msvc
            container: ~
            shell: "powershell"
            setup: |
              mkdir -p dist/include dist/lib
            dependencies: |
              pip install scons

          - name: Linux-GNU
            os: ubuntu-latest
            arch: x86_64
            triple: x86_64-linux-gnu
            container: 
            shell: "bash"
            image: ubuntu:latest
            setup: |
              mkdir -p dist/include dist/lib
              sudo apt-get update
              # SDL dependencies
              sudo apt-get install -y git cmake build-essential python3 python3-pip zip ninja-build   libasound2-dev libpulse-dev libx11-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxinerama-dev libdbus-1-dev libudev-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libdrm-dev libgbm-dev libwayland-dev speech-dispatcher libspeechd-dev


            dependencies: |
              sudo pip3 install scons
          
          - name: macOS
            os: macos-latest
            arch: x86_64
            triple: x86_64-apple-darwin
            container: ~
            setup: |
              mkdir -p dist/include dist/lib
            dependencies: |
              brew install scons

    steps:
      - name: Setup Environment
        shell: bash
        run: ${{ matrix.target.setup }}
        if: matrix.target.setup != ''
      
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
        if: matrix.target.name == 'Windows' || matrix.target.name == 'macOS'

      # macOS-specific setup: Install Xcode Command Line Tools and SCons
      - name: Install Xcode Command Line Tools (macOS)
        if: matrix.target.os == 'macos-latest'
        run: |
          sudo xcode-select --install || echo "Xcode Command Line Tools already installed"


      - name: Install Dependencies
        shell: bash
        run: ${{ matrix.target.dependencies }}
      
      - name: Install CMake
        uses: lukka/get-cmake@latest
        if: matrix.target.name == 'Windows' || matrix.target.name == 'macOS'


      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DSDL_INSTALL=ON -DWITH_JAVA=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/dist -G Ninja
      
      - name: Build with CMake
        run: |
          cd build
          cmake --build . --config Release
      
      - name: Install with CMake
        run: |
          cd build
          cmake --install .
          



      - name: Zip Files
        uses: vimtor/action-zip@v1.2
        with:
          files: dist/ link_targets.txt
          dest: swift-audiogame-libs-${{ matrix.target.triple }}.zip
      

      # Conditional step to upload to release if triggered by a release event
      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./swift-audiogame-libs-${{ env.TARGET }}.zip
          asset_name: swift-audiogame-libs-${{ env.TARGET }}.zip
          asset_content_type: application/zip
      
      # Conditional step to upload artifact for manual inspection if not triggered by a release event
      - name: Upload Artifact
        if: github.event_name != 'release'  
        uses: actions/upload-artifact@v4
        with:
          name: swift-audiogame-libs-${{ env.TARGET }}
          path: ./swift-audiogame-libs-${{ env.TARGET }}.zip